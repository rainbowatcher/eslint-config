import { GLOB_TESTS, isInEditor } from "@rainbowatcher/eslint-config-shared"
import type { EslintFlatConfigItem } from "@rainbowatcher/eslint-config-shared"

export function test(): EslintFlatConfigItem {
    return {
        files: [...GLOB_TESTS],
        name: "rainbowatcher:js:test",
        rules: {
            "node/prefer-global/process": "off",

            "test/consistent-test-filename": "off",
            "test/consistent-test-it": ["error", { fn: "it", withinDescribe: "it" }],
            "test/expect-expect": "off",
            "test/max-expects": "off",
            "test/max-nested-describe": ["error", { max: 5 }],
            "test/no-alias-methods": "error",
            "test/no-commented-out-tests": isInEditor() ? "off" : "error",
            "test/no-conditional-expect": "error",
            "test/no-conditional-in-test": "error",
            "test/no-conditional-tests": "error",
            "test/no-disabled-tests": isInEditor() ? "off" : "error",
            "test/no-duplicate-hooks": "error",
            "test/no-focused-tests": isInEditor() ? "off" : "error",
            "test/no-hooks": "off",
            "test/no-identical-title": "error",
            "test/no-import-node-test": "error",
            "test/no-interpolation-in-snapshots": "error",
            "test/no-large-snapshots": ["error", { maxSize: 200 }],
            "test/no-mocks-import": "error",
            "test/no-restricted-matchers": "off",
            "test/no-restricted-vi-methods": "off",
            "test/no-standalone-expect": "error",
            "test/no-test-prefixes": "error",
            "test/no-test-return-statement": "error",
            "test/prefer-called-with": "off",
            "test/prefer-comparison-matcher": "off",
            "test/prefer-each": "error",
            "test/prefer-equality-matcher": "error",
            "test/prefer-expect-assertions": ["error", { onlyFunctionsWithExpectInCallback: true }],
            "test/prefer-expect-resolves": "error",
            "test/prefer-hooks-in-order": "error",
            "test/prefer-hooks-on-top": "error",
            "test/prefer-lowercase-title": ["error", { ignoreTopLevelDescribe: true }],
            "test/prefer-mock-promise-shorthand": "error",
            "test/prefer-snapshot-hint": "off",
            "test/prefer-spy-on": "error",
            "test/prefer-strict-equal": "error",
            "test/prefer-to-be": "error",
            "test/prefer-to-be-falsy": "error",
            "test/prefer-to-be-object": "error",
            "test/prefer-to-be-truthy": "error",
            "test/prefer-to-contain": "error",
            "test/prefer-to-have-length": "error",
            "test/prefer-todo": "error",
            "test/require-hook": "off",
            "test/require-local-test-context-for-concurrent-snapshots": "error",
            "test/require-to-throw-message": "error",
            "test/require-top-level-describe": "error",
            "test/valid-describe-callback": "error",
            "test/valid-expect": ["error", { maxArgs: 10 }],
            "test/valid-title": ["error", {
                mustNotMatch: [String.raw`^\s+$`, String.raw`^\s*\d+\s*$`],
            }],

            "ts/explicit-function-return-type": "off",

            "unicorn/error-message": "off",
            "unicorn/no-useless-undefined": "off",
        },
    }
}
